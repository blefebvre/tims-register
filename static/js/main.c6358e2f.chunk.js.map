{"version":3,"sources":["components/Button.tsx","components/Numpad.tsx","hooks/KeyboardEvent.ts","components/Display.tsx","components/FoodItems.tsx","components/ExtraButtons.tsx","components/TimsRegister.tsx","App.tsx","serviceWorker.js","index.js"],"names":["Button","React","memo","props","children","className","onClick","keyRef","react_default","a","createElement","concat","ref","Numpad","keys","callback","regularWidthKeys","doubleWidthKeys","key","keyPress","useEffect","handler","event","includes","window","addEventListener","removeEventListener","getButton","text","Button_Button","_","keyValue","map","Display","_ref","value","FoodItems","itemSelected","renderButton","item","title","price","ExtraButtons","itemVoid","console","log","TimsRegister","_useState","useState","_useState2","Object","slicedToArray","numpadValue","setNumpadValue","_useState3","_useState4","numpadString","setNumpadString","Fragment","FoodItems_FoodItems","ExtraButtons_ExtraButtons","Numpad_Numpad","updatedNumpadString","length","substring","valueStr","valueWithDecimalPlace","slice","parseFloat","e","getFloatFromNumpadString","Display_Display","App","TimsRegister_TimsRegister","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c6358e2f.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Button.css\";\n\ninterface Props {\n  onClick(event: React.MouseEvent<HTMLButtonElement, MouseEvent>): void;\n  className?: string;\n  keyRef?: any;\n}\n\nexport const Button: React.FC<Props> = React.memo((props) => {\n  const {children, className, onClick, keyRef} = props; \n  return <button \n    onClick={onClick} \n    className={`Button ${className ? className : \"\"}`} \n    ref={keyRef}>\n      {children}\n  </button>;\n});","import React from \"react\";\nimport { Button } from \"./Button\";\n\nimport \"./Numpad.css\";\nimport { useKeyboardEvent } from \"../hooks/KeyboardEvent\";\n\ninterface Props {\n  keyPress(keyValue: string): void;\n}\n\nexport const Numpad: React.FC<Props> = (props) => {\n  // Render the keypad\n  const regularWidthKeys = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"Del\"];\n  const doubleWidthKeys = [\"0\"];\n\n  // Add keypress listeners\n  useKeyboardEvent([...regularWidthKeys, ...doubleWidthKeys], (key) => {\n    // Click the key\n    props.keyPress(key);\n  });\n\n  const keyClicked = (keyValue: string) => {\n    props.keyPress(keyValue);\n  }\n\n  const getButton = (text: string, className?: string) => {\n    return <Button \n      key={text} \n      onClick={(_) => keyClicked(text)}\n      className={className ? className : \"\"}>\n        {text}\n    </Button>\n  }\n\n  return <div className=\"Numpad\">\n    {regularWidthKeys.map((keyValue: string) => getButton(keyValue))}\n    {doubleWidthKeys.map((keyValue: string) => getButton(keyValue, \"two-col\"))}\n  </div>;\n};\n","import { useEffect } from \"react\";\n\n// Hook implementation inspired by https://medium.com/@nicolaslopezj/reusing-logic-with-react-hooks-8e691f7352fa\nexport function useKeyboardEvent(\n  keys: string[],\n  callback: (key: string) => void\n) {\n  useEffect(() => {\n    const handler = function(event: any) {\n      const key = event.key;\n      if (key) {\n        if (keys.includes(key)) {\n          // Fire the callback with the given key\n          callback(key);\n        }\n        // Special case for Del key (map to Backspace)\n        const deleteKey = \"Del\";\n        if (key === \"Backspace\" && keys.includes(deleteKey)) {\n          callback(deleteKey);\n        }\n      }\n    };\n    window.addEventListener(\"keydown\", handler);\n    return () => {\n      window.removeEventListener(\"keydown\", handler);\n    };\n  });\n}\n","import React from \"react\";\n\ninterface Props {\n  value: number;\n}\n\nexport const Display: React.FC<Props> = ({value}) => {\n  return <div>Value: {value}</div>\n}","import React from \"react\";\nimport { FoodItem } from \"../models/FoodItem\";\nimport { Button } from \"./Button\";\n\nimport \"./FoodItems.css\";\n\ninterface Props {\n  itemSelected(item: FoodItem): void;\n}\n\nexport const FoodItems: React.FC<Props> = (props) => {\n  const { itemSelected } = props;\n\n  const coffeeAddons: FoodItem[] = [\n    {\n      title: \"4x4\",\n      price: 0\n    },\n    {\n      title: \"Triple Triple\",\n      price: 0\n    },\n    {\n      title: \"Double Double\",\n      price: 0\n    },\n    {\n      title: \"Regular\",\n      price: 0\n    }\n  ]\n\n  const darkRoast: FoodItem[] = [\n    {\n      title: \"SM Dark Roast\",\n      price: 1.05\n    },\n    {\n      title: \"MD Dark Roast\",\n      price: 1.17\n    },\n    {\n      title: \"LG Dark Roast\",\n      price: 1.31\n    },\n    {\n      title: \"XL Dark Roast\",\n      price: 1.49\n    }\n  ];\n\n  const originalBlend: FoodItem[] = [\n    {\n      title: \"SM Orig Blend\",\n      price: 1.05\n    },\n    {\n      title: \"MD Orig Blend\",\n      price: 1.17\n    },\n    {\n      title: \"LG Orig Blend\",\n      price: 1.31\n    },\n    {\n      title: \"XL Orig Blend\",\n      price: 1.49\n    }\n  ]\n\n  const renderButton = (item: FoodItem, className: string) => {\n    return <Button key={item.title} \n      onClick={() => itemSelected(item)}\n      className={className}>\n        {item.title}\n    </Button>;\n  }\n\n  return <div className=\"FoodItems\">\n    {coffeeAddons.map((item) => renderButton(item, \"coffee-addons\"))}\n    {darkRoast.map((item) => renderButton(item, \"dark-roast\"))}\n    {originalBlend.map((item) => renderButton(item, \"original-blend\"))}\n  </div>;\n};","import React from \"react\";\nimport { Button } from \"./Button\";\n\ninterface Props {\n  itemVoid(): void;\n}\n\nexport const ExtraButtons: React.FC<Props> = (props) => {\n  return <div className=\"ExtraButtons\">\n    <Button\n      onClick={() => props.itemVoid()}\n      className=\"item-void two-col\">\n        Item Void\n    </Button>\n    <Button\n      onClick={() => console.log(\"Take-Out\")}\n      className=\"take-out\">\n        Take-Out\n    </Button>\n    <Button\n      onClick={() => console.log(\"Eat In\")}\n      className=\"eat-in\">\n        Eat In\n    </Button>\n  </div>;\n}","import React, { Component, useState } from \"react\";\nimport { Numpad } from \"./Numpad\";\nimport { Display } from \"./Display\";\nimport { FoodItems } from \"./FoodItems\";\nimport { ExtraButtons } from \"./ExtraButtons\";\n\nimport \"./TimsRegister.css\";\nimport { FoodItem } from \"../models/FoodItem\";\n\ninterface State {\n  numpadString: string;\n  numpadValue: number;\n}\n\nexport const TimsRegister: React.FC<any> = (props) => {\n\n  const [numpadValue, setNumpadValue] = useState(0);\n  const [numpadString, setNumpadString] = useState(\"\");\n\n  const getFloatFromNumpadString = (valueStr: string): number => {\n    let valueWithDecimalPlace = valueStr;\n    // Put a decimal place at the right spot\n    switch (valueStr.length) {\n      case 0:\n        return 0;\n      case 1:\n        valueWithDecimalPlace = \".0\" + valueStr;\n        break;\n      default:\n        valueWithDecimalPlace = valueStr.slice(0, valueStr.length - 2) + \".\" + valueStr.slice(valueStr.length - 2);\n    }\n    try {\n      return parseFloat(valueWithDecimalPlace);\n    } catch(e) {\n      return 0;\n    }\n  }\n\n  const keyPress = (keyValue: string) => {\n    let updatedNumpadString: string = numpadString;\n\n    if (keyValue === \"Del\") {\n      // Handle delete\n      if (numpadString.length >= 1) {\n        updatedNumpadString = updatedNumpadString.substring(0, updatedNumpadString.length - 1);\n      }\n    } else {\n      updatedNumpadString = updatedNumpadString + keyValue;\n    }\n    // Parse the string into a float\n    setNumpadString(updatedNumpadString);\n    setNumpadValue(getFloatFromNumpadString(updatedNumpadString));\n  };\n\n  const itemSelected = (item: FoodItem) => {\n    console.log(\"Item selected!\", item);\n  };\n\n  const voidLastItem = () => {\n    // TODO\n    console.log(\"Void last item\");\n  };\n\n  return <>\n    <div className=\"screen\">\n      <div className=\"buttons\">\n        <div className=\"food-items\">\n          <FoodItems itemSelected={itemSelected} />\n          <ExtraButtons itemVoid={() => voidLastItem()} />\n        </div>\n        <div className=\"numpad\">\n          <Numpad keyPress={keyPress} />\n        </div>\n      </div>\n      <div className=\"totals\">\n        <Display value={numpadValue} />\n      </div>\n    </div>\n  </>;\n};\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { TimsRegister } from \"./components/TimsRegister\";\n\nclass App extends Component {\n\n  public render() {\n    return <div className=\"container\">\n      <TimsRegister />\n    </div>;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}